// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeJobCombination struct {
	IDStub        func() string
	iDMutex       sync.RWMutex
	iDArgsForCall []struct{}
	iDReturns     struct {
		result1 string
	}
	iDReturnsOnCall map[int]struct {
		result1 string
	}
	JobIDStub        func() int
	jobIDMutex       sync.RWMutex
	jobIDArgsForCall []struct{}
	jobIDReturns     struct {
		result1 int
	}
	jobIDReturnsOnCall map[int]struct {
		result1 int
	}
	ResourceSpaceIDStub        func() int
	resourceSpaceIDMutex       sync.RWMutex
	resourceSpaceIDArgsForCall []struct{}
	resourceSpaceIDReturns     struct {
		result1 int
	}
	resourceSpaceIDReturnsOnCall map[int]struct {
		result1 int
	}
	ResourceSpacesStub        func() map[string]string
	resourceSpacesMutex       sync.RWMutex
	resourceSpacesArgsForCall []struct{}
	resourceSpacesReturns     struct {
		result1 map[string]string
	}
	resourceSpacesReturnsOnCall map[int]struct {
		result1 map[string]string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJobCombination) ID() string {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct{}{})
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.iDReturns.result1
}

func (fake *FakeJobCombination) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeJobCombination) IDReturns(result1 string) {
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeJobCombination) IDReturnsOnCall(i int, result1 string) {
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeJobCombination) JobID() int {
	fake.jobIDMutex.Lock()
	ret, specificReturn := fake.jobIDReturnsOnCall[len(fake.jobIDArgsForCall)]
	fake.jobIDArgsForCall = append(fake.jobIDArgsForCall, struct{}{})
	fake.recordInvocation("JobID", []interface{}{})
	fake.jobIDMutex.Unlock()
	if fake.JobIDStub != nil {
		return fake.JobIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.jobIDReturns.result1
}

func (fake *FakeJobCombination) JobIDCallCount() int {
	fake.jobIDMutex.RLock()
	defer fake.jobIDMutex.RUnlock()
	return len(fake.jobIDArgsForCall)
}

func (fake *FakeJobCombination) JobIDReturns(result1 int) {
	fake.JobIDStub = nil
	fake.jobIDReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeJobCombination) JobIDReturnsOnCall(i int, result1 int) {
	fake.JobIDStub = nil
	if fake.jobIDReturnsOnCall == nil {
		fake.jobIDReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.jobIDReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeJobCombination) ResourceSpaceID() int {
	fake.resourceSpaceIDMutex.Lock()
	ret, specificReturn := fake.resourceSpaceIDReturnsOnCall[len(fake.resourceSpaceIDArgsForCall)]
	fake.resourceSpaceIDArgsForCall = append(fake.resourceSpaceIDArgsForCall, struct{}{})
	fake.recordInvocation("ResourceSpaceID", []interface{}{})
	fake.resourceSpaceIDMutex.Unlock()
	if fake.ResourceSpaceIDStub != nil {
		return fake.ResourceSpaceIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.resourceSpaceIDReturns.result1
}

func (fake *FakeJobCombination) ResourceSpaceIDCallCount() int {
	fake.resourceSpaceIDMutex.RLock()
	defer fake.resourceSpaceIDMutex.RUnlock()
	return len(fake.resourceSpaceIDArgsForCall)
}

func (fake *FakeJobCombination) ResourceSpaceIDReturns(result1 int) {
	fake.ResourceSpaceIDStub = nil
	fake.resourceSpaceIDReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeJobCombination) ResourceSpaceIDReturnsOnCall(i int, result1 int) {
	fake.ResourceSpaceIDStub = nil
	if fake.resourceSpaceIDReturnsOnCall == nil {
		fake.resourceSpaceIDReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.resourceSpaceIDReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeJobCombination) ResourceSpaces() map[string]string {
	fake.resourceSpacesMutex.Lock()
	ret, specificReturn := fake.resourceSpacesReturnsOnCall[len(fake.resourceSpacesArgsForCall)]
	fake.resourceSpacesArgsForCall = append(fake.resourceSpacesArgsForCall, struct{}{})
	fake.recordInvocation("ResourceSpaces", []interface{}{})
	fake.resourceSpacesMutex.Unlock()
	if fake.ResourceSpacesStub != nil {
		return fake.ResourceSpacesStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.resourceSpacesReturns.result1
}

func (fake *FakeJobCombination) ResourceSpacesCallCount() int {
	fake.resourceSpacesMutex.RLock()
	defer fake.resourceSpacesMutex.RUnlock()
	return len(fake.resourceSpacesArgsForCall)
}

func (fake *FakeJobCombination) ResourceSpacesReturns(result1 map[string]string) {
	fake.ResourceSpacesStub = nil
	fake.resourceSpacesReturns = struct {
		result1 map[string]string
	}{result1}
}

func (fake *FakeJobCombination) ResourceSpacesReturnsOnCall(i int, result1 map[string]string) {
	fake.ResourceSpacesStub = nil
	if fake.resourceSpacesReturnsOnCall == nil {
		fake.resourceSpacesReturnsOnCall = make(map[int]struct {
			result1 map[string]string
		})
	}
	fake.resourceSpacesReturnsOnCall[i] = struct {
		result1 map[string]string
	}{result1}
}

func (fake *FakeJobCombination) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.jobIDMutex.RLock()
	defer fake.jobIDMutex.RUnlock()
	fake.resourceSpaceIDMutex.RLock()
	defer fake.resourceSpaceIDMutex.RUnlock()
	fake.resourceSpacesMutex.RLock()
	defer fake.resourceSpacesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJobCombination) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.JobCombination = new(FakeJobCombination)
